
labs6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000076c  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  0080006e  0080006e  0000080e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f73  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  00000fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002ec  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000168  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000214  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000150  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000168  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002c1  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 03 	call	0x6ae	; 0x6ae <main>
  8a:	0c 94 b4 03 	jmp	0x768	; 0x768 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:
} TASK;

TASK TASK_TABLE[TASK_SIZE];        // tablica zadan
uint8_t task_count = 0;                // aktualna ilosc zadan w tablicy TASK_TABLE
ISR(TIMER0_COMP_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	00 90 5f 00 	lds	r0, 0x005F
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	00 d0       	rcall	.+0      	; 0xb0 <__vector_10+0x1e>
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	TASK *tsk;
	for(i = 0; i<task_count; ++i)        // w przerwaniu dla kazdego zadania w liscie zadan
  b6:	19 82       	std	Y+1, r1	; 0x01
  b8:	6c c0       	rjmp	.+216    	; 0x192 <__vector_10+0x100>
	{
		tsk = TASK_TABLE + i;
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	80 59       	subi	r24, 0x90	; 144
  ce:	9f 4f       	sbci	r25, 0xFF	; 255
  d0:	9b 83       	std	Y+3, r25	; 0x03
  d2:	8a 83       	std	Y+2, r24	; 0x02
		if(tsk->interval != NON_PERIODIC)        // jesli zadanie jest periodyczne
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	9b 81       	ldd	r25, Y+3	; 0x03
  d8:	fc 01       	movw	r30, r24
  da:	82 81       	ldd	r24, Z+2	; 0x02
  dc:	93 81       	ldd	r25, Z+3	; 0x03
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	69 f1       	breq	.+90     	; 0x13c <__vector_10+0xaa>
		{
			tsk->togo--;                                // zmniejsz licznik pozostaly do zakonczenia oczekiwania
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	9b 81       	ldd	r25, Y+3	; 0x03
  e6:	fc 01       	movw	r30, r24
  e8:	84 81       	ldd	r24, Z+4	; 0x04
  ea:	95 81       	ldd	r25, Z+5	; 0x05
  ec:	9c 01       	movw	r18, r24
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	9b 81       	ldd	r25, Y+3	; 0x03
  f6:	fc 01       	movw	r30, r24
  f8:	35 83       	std	Z+5, r19	; 0x05
  fa:	24 83       	std	Z+4, r18	; 0x04
			if(tsk->togo == 0)                        // i jesli zakonczono oczekiwanie to ustaw licznik na wartosc poczatkowa i oznacz jako gotowe do wykonania
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	fc 01       	movw	r30, r24
 102:	84 81       	ldd	r24, Z+4	; 0x04
 104:	95 81       	ldd	r25, Z+5	; 0x05
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	09 f0       	breq	.+2      	; 0x10c <__vector_10+0x7a>
 10a:	40 c0       	rjmp	.+128    	; 0x18c <__vector_10+0xfa>
			{
				tsk->togo = tsk->interval;
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	9b 81       	ldd	r25, Y+3	; 0x03
 110:	fc 01       	movw	r30, r24
 112:	22 81       	ldd	r18, Z+2	; 0x02
 114:	33 81       	ldd	r19, Z+3	; 0x03
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	9b 81       	ldd	r25, Y+3	; 0x03
 11a:	fc 01       	movw	r30, r24
 11c:	35 83       	std	Z+5, r19	; 0x05
 11e:	24 83       	std	Z+4, r18	; 0x04
				tsk->ready++;
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	9b 81       	ldd	r25, Y+3	; 0x03
 124:	fc 01       	movw	r30, r24
 126:	86 81       	ldd	r24, Z+6	; 0x06
 128:	97 81       	ldd	r25, Z+7	; 0x07
 12a:	9c 01       	movw	r18, r24
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	9b 81       	ldd	r25, Y+3	; 0x03
 134:	fc 01       	movw	r30, r24
 136:	37 83       	std	Z+7, r19	; 0x07
 138:	26 83       	std	Z+6, r18	; 0x06
 13a:	28 c0       	rjmp	.+80     	; 0x18c <__vector_10+0xfa>
			}
		}
		else if(tsk->togo > 0)                                // jesli jest aperiodyczne to zmniejsz licznik do konca oczekiwania i ewentualnie ustaw jako gotowe
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	9b 81       	ldd	r25, Y+3	; 0x03
 140:	fc 01       	movw	r30, r24
 142:	84 81       	ldd	r24, Z+4	; 0x04
 144:	95 81       	ldd	r25, Z+5	; 0x05
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	09 f1       	breq	.+66     	; 0x18c <__vector_10+0xfa>
		{
			tsk->togo--;
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	9b 81       	ldd	r25, Y+3	; 0x03
 14e:	fc 01       	movw	r30, r24
 150:	84 81       	ldd	r24, Z+4	; 0x04
 152:	95 81       	ldd	r25, Z+5	; 0x05
 154:	9c 01       	movw	r18, r24
 156:	21 50       	subi	r18, 0x01	; 1
 158:	31 09       	sbc	r19, r1
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	9b 81       	ldd	r25, Y+3	; 0x03
 15e:	fc 01       	movw	r30, r24
 160:	35 83       	std	Z+5, r19	; 0x05
 162:	24 83       	std	Z+4, r18	; 0x04
			if(tsk->togo == 0)
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	9b 81       	ldd	r25, Y+3	; 0x03
 168:	fc 01       	movw	r30, r24
 16a:	84 81       	ldd	r24, Z+4	; 0x04
 16c:	95 81       	ldd	r25, Z+5	; 0x05
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	69 f4       	brne	.+26     	; 0x18c <__vector_10+0xfa>
			{
				tsk->ready++;
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	9b 81       	ldd	r25, Y+3	; 0x03
 176:	fc 01       	movw	r30, r24
 178:	86 81       	ldd	r24, Z+6	; 0x06
 17a:	97 81       	ldd	r25, Z+7	; 0x07
 17c:	9c 01       	movw	r18, r24
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	9b 81       	ldd	r25, Y+3	; 0x03
 186:	fc 01       	movw	r30, r24
 188:	37 83       	std	Z+7, r19	; 0x07
 18a:	26 83       	std	Z+6, r18	; 0x06
uint8_t task_count = 0;                // aktualna ilosc zadan w tablicy TASK_TABLE
ISR(TIMER0_COMP_vect)
{
	uint8_t i;
	TASK *tsk;
	for(i = 0; i<task_count; ++i)        // w przerwaniu dla kazdego zadania w liscie zadan
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	80 91 6e 00 	lds	r24, 0x006E
 196:	99 81       	ldd	r25, Y+1	; 0x01
 198:	98 17       	cp	r25, r24
 19a:	08 f4       	brcc	.+2      	; 0x19e <__vector_10+0x10c>
 19c:	8e cf       	rjmp	.-228    	; 0xba <__vector_10+0x28>
			{
				tsk->ready++;
			}
		}
	}
}
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	00 92 5f 00 	sts	0x005F, r0
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <addTask>:

void addTask(void (*f)(),uint32_t timeout, uint32_t isPeriodic)        // dodawanie zadan do tablicy zadan
{
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	2a 97       	sbiw	r28, 0x0a	; 10
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	9a 83       	std	Y+2, r25	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	4b 83       	std	Y+3, r20	; 0x03
 1de:	5c 83       	std	Y+4, r21	; 0x04
 1e0:	6d 83       	std	Y+5, r22	; 0x05
 1e2:	7e 83       	std	Y+6, r23	; 0x06
 1e4:	0f 83       	std	Y+7, r16	; 0x07
 1e6:	18 87       	std	Y+8, r17	; 0x08
 1e8:	29 87       	std	Y+9, r18	; 0x09
 1ea:	3a 87       	std	Y+10, r19	; 0x0a
	if(task_count + 1<TASK_SIZE){        // jesli jest jeszcze miejsce w tablicy
 1ec:	80 91 6e 00 	lds	r24, 0x006E
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	8a 30       	cpi	r24, 0x0A	; 10
 1f8:	91 05       	cpc	r25, r1
 1fa:	0c f0       	brlt	.+2      	; 0x1fe <addTask+0x3e>
 1fc:	53 c0       	rjmp	.+166    	; 0x2a4 <addTask+0xe4>
		cli();                                        // wylaczamy obsluge przerwan
 1fe:	f8 94       	cli
		TASK_TABLE[task_count].function=f;
 200:	80 91 6e 00 	lds	r24, 0x006E
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	80 59       	subi	r24, 0x90	; 144
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	3a 81       	ldd	r19, Y+2	; 0x02
 21c:	fc 01       	movw	r30, r24
 21e:	31 83       	std	Z+1, r19	; 0x01
 220:	20 83       	st	Z, r18
		TASK_TABLE[task_count].togo=timeout;
 222:	80 91 6e 00 	lds	r24, 0x006E
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	2b 81       	ldd	r18, Y+3	; 0x03
 22c:	3c 81       	ldd	r19, Y+4	; 0x04
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	8c 58       	subi	r24, 0x8C	; 140
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	fc 01       	movw	r30, r24
 240:	31 83       	std	Z+1, r19	; 0x01
 242:	20 83       	st	Z, r18
		TASK_TABLE[task_count].ready=0;
 244:	80 91 6e 00 	lds	r24, 0x006E
 248:	88 2f       	mov	r24, r24
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	8a 58       	subi	r24, 0x8A	; 138
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	fc 01       	movw	r30, r24
 25e:	11 82       	std	Z+1, r1	; 0x01
 260:	10 82       	st	Z, r1
		TASK_TABLE[task_count++].interval=(isPeriodic)?timeout:NON_PERIODIC;
 262:	40 91 6e 00 	lds	r20, 0x006E
 266:	24 2f       	mov	r18, r20
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	8f 81       	ldd	r24, Y+7	; 0x07
 26c:	98 85       	ldd	r25, Y+8	; 0x08
 26e:	a9 85       	ldd	r26, Y+9	; 0x09
 270:	ba 85       	ldd	r27, Y+10	; 0x0a
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	a1 05       	cpc	r26, r1
 276:	b1 05       	cpc	r27, r1
 278:	19 f0       	breq	.+6      	; 0x280 <addTask+0xc0>
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	9c 81       	ldd	r25, Y+4	; 0x04
 27e:	02 c0       	rjmp	.+4      	; 0x284 <addTask+0xc4>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	2e 58       	subi	r18, 0x8E	; 142
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	f9 01       	movw	r30, r18
 296:	91 83       	std	Z+1, r25	; 0x01
 298:	80 83       	st	Z, r24
 29a:	84 2f       	mov	r24, r20
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 6e 00 	sts	0x006E, r24
		sei();                                        // wlaczamy przerwania
 2a2:	78 94       	sei
	}
}
 2a4:	2a 96       	adiw	r28, 0x0a	; 10
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <setupTimer>:

void setupTimer()        // inicjalizacja timera
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
	TIMSK=0b00000010;
 2c2:	89 e5       	ldi	r24, 0x59	; 89
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	22 e0       	ldi	r18, 0x02	; 2
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
	TCCR0=0b00000011;
 2cc:	83 e5       	ldi	r24, 0x53	; 83
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	23 e0       	ldi	r18, 0x03	; 3
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	OCR0=250;
 2d6:	8c e5       	ldi	r24, 0x5C	; 92
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	2a ef       	ldi	r18, 0xFA	; 250
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
	sei();
 2e0:	78 94       	sei
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <init_kernel>:
void init_kernel()        // zapelnianie tablicy TASK_TABLE
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	1f 92       	push	r1
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	task_count = 0;
 2f2:	10 92 6e 00 	sts	0x006E, r1
	for(i=0;i<TASK_SIZE; ++i)
 2f6:	19 82       	std	Y+1, r1	; 0x01
 2f8:	3b c0       	rjmp	.+118    	; 0x370 <init_kernel+0x88>
	{
		TASK_TABLE[i].function = 0;
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	80 59       	subi	r24, 0x90	; 144
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	fc 01       	movw	r30, r24
 312:	11 82       	std	Z+1, r1	; 0x01
 314:	10 82       	st	Z, r1
		TASK_TABLE[i].interval = 0;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	8e 58       	subi	r24, 0x8E	; 142
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	fc 01       	movw	r30, r24
 32e:	11 82       	std	Z+1, r1	; 0x01
 330:	10 82       	st	Z, r1
		TASK_TABLE[i].togo = 0;
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	8c 58       	subi	r24, 0x8C	; 140
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	fc 01       	movw	r30, r24
 34a:	11 82       	std	Z+1, r1	; 0x01
 34c:	10 82       	st	Z, r1
		TASK_TABLE[i].ready = 0;
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	88 2f       	mov	r24, r24
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	8a 58       	subi	r24, 0x8A	; 138
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	fc 01       	movw	r30, r24
 366:	11 82       	std	Z+1, r1	; 0x01
 368:	10 82       	st	Z, r1
}
void init_kernel()        // zapelnianie tablicy TASK_TABLE
{
	uint8_t i;
	task_count = 0;
	for(i=0;i<TASK_SIZE; ++i)
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	8a 30       	cpi	r24, 0x0A	; 10
 374:	10 f2       	brcs	.-124    	; 0x2fa <init_kernel+0x12>
		TASK_TABLE[i].function = 0;
		TASK_TABLE[i].interval = 0;
		TASK_TABLE[i].togo = 0;
		TASK_TABLE[i].ready = 0;
	}
}
 376:	0f 90       	pop	r0
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <schedule>:

void schedule()                // zarzadzanie zadaniami
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	1f 92       	push	r1
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	while(task_count)        // dopoki sa zadania w TASK_TABLE
 388:	4a c0       	rjmp	.+148    	; 0x41e <schedule+0xa0>
	{
		for(i = 0; i < task_count; ++i) {
 38a:	19 82       	std	Y+1, r1	; 0x01
 38c:	42 c0       	rjmp	.+132    	; 0x412 <schedule+0x94>
			if(TASK_TABLE[i].ready != 0) {                // jesli odliczanie do wykonania zadania sie zakonczylo
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	88 2f       	mov	r24, r24
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	8a 58       	subi	r24, 0x8A	; 138
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	fc 01       	movw	r30, r24
 3a6:	80 81       	ld	r24, Z
 3a8:	91 81       	ldd	r25, Z+1	; 0x01
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	79 f1       	breq	.+94     	; 0x40c <schedule+0x8e>
				TASK_TABLE[i].function();        // to wykonaj zadanie
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	80 59       	subi	r24, 0x90	; 144
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	fc 01       	movw	r30, r24
 3c6:	80 81       	ld	r24, Z
 3c8:	91 81       	ldd	r25, Z+1	; 0x01
 3ca:	fc 01       	movw	r30, r24
 3cc:	09 95       	icall
				cli();
 3ce:	f8 94       	cli
				TASK_TABLE[i].ready--;                // flaga ready jest zerowana
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	88 2f       	mov	r24, r24
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	9c 01       	movw	r18, r24
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	2a 58       	subi	r18, 0x8A	; 138
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255
 3e8:	f9 01       	movw	r30, r18
 3ea:	20 81       	ld	r18, Z
 3ec:	31 81       	ldd	r19, Z+1	; 0x01
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	31 09       	sbc	r19, r1
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	8a 58       	subi	r24, 0x8A	; 138
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	fc 01       	movw	r30, r24
 404:	31 83       	std	Z+1, r19	; 0x01
 406:	20 83       	st	Z, r18
				sei();
 408:	78 94       	sei
				break;
 40a:	09 c0       	rjmp	.+18     	; 0x41e <schedule+0xa0>
void schedule()                // zarzadzanie zadaniami
{
	uint8_t i;
	while(task_count)        // dopoki sa zadania w TASK_TABLE
	{
		for(i = 0; i < task_count; ++i) {
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	8f 5f       	subi	r24, 0xFF	; 255
 410:	89 83       	std	Y+1, r24	; 0x01
 412:	80 91 6e 00 	lds	r24, 0x006E
 416:	99 81       	ldd	r25, Y+1	; 0x01
 418:	98 17       	cp	r25, r24
 41a:	08 f4       	brcc	.+2      	; 0x41e <schedule+0xa0>
 41c:	b8 cf       	rjmp	.-144    	; 0x38e <schedule+0x10>
}

void schedule()                // zarzadzanie zadaniami
{
	uint8_t i;
	while(task_count)        // dopoki sa zadania w TASK_TABLE
 41e:	80 91 6e 00 	lds	r24, 0x006E
 422:	88 23       	and	r24, r24
 424:	09 f0       	breq	.+2      	; 0x428 <schedule+0xaa>
 426:	b1 cf       	rjmp	.-158    	; 0x38a <schedule+0xc>
				sei();
				break;
			}
		}
	}
}
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <get_key_pressed>:

int row = -1;
int col = -1;

void get_key_pressed()
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <get_key_pressed+0x6>
 436:	00 d0       	rcall	.+0      	; 0x438 <get_key_pressed+0x8>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
	PORTC = 0x00;
 43c:	85 e3       	ldi	r24, 0x35	; 53
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	fc 01       	movw	r30, r24
 442:	10 82       	st	Z, r1
	DDRC = 0b00001111;
 444:	84 e3       	ldi	r24, 0x34	; 52
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	2f e0       	ldi	r18, 0x0F	; 15
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
	PORTC = 0b11110000;
 44e:	85 e3       	ldi	r24, 0x35	; 53
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	20 ef       	ldi	r18, 0xF0	; 240
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
	for(int i=0; i<16;++i);
 458:	1a 82       	std	Y+2, r1	; 0x02
 45a:	19 82       	std	Y+1, r1	; 0x01
 45c:	05 c0       	rjmp	.+10     	; 0x468 <get_key_pressed+0x38>
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	9a 83       	std	Y+2, r25	; 0x02
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	80 31       	cpi	r24, 0x10	; 16
 46e:	91 05       	cpc	r25, r1
 470:	b4 f3       	brlt	.-20     	; 0x45e <get_key_pressed+0x2e>
	
	//PORTA = PINC;
	if(PINC == 0b11100000)
 472:	83 e3       	ldi	r24, 0x33	; 51
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	fc 01       	movw	r30, r24
 478:	80 81       	ld	r24, Z
 47a:	80 3e       	cpi	r24, 0xE0	; 224
 47c:	39 f4       	brne	.+14     	; 0x48c <get_key_pressed+0x5c>
		row = 3;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	90 93 6b 00 	sts	0x006B, r25
 486:	80 93 6a 00 	sts	0x006A, r24
 48a:	2b c0       	rjmp	.+86     	; 0x4e2 <get_key_pressed+0xb2>
	else if(PINC == 0b11010000)
 48c:	83 e3       	ldi	r24, 0x33	; 51
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	80 3d       	cpi	r24, 0xD0	; 208
 496:	39 f4       	brne	.+14     	; 0x4a6 <get_key_pressed+0x76>
		row = 2;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 6b 00 	sts	0x006B, r25
 4a0:	80 93 6a 00 	sts	0x006A, r24
 4a4:	1e c0       	rjmp	.+60     	; 0x4e2 <get_key_pressed+0xb2>
	else if(PINC == 0b10110000)
 4a6:	83 e3       	ldi	r24, 0x33	; 51
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	80 81       	ld	r24, Z
 4ae:	80 3b       	cpi	r24, 0xB0	; 176
 4b0:	39 f4       	brne	.+14     	; 0x4c0 <get_key_pressed+0x90>
		row = 1;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	90 93 6b 00 	sts	0x006B, r25
 4ba:	80 93 6a 00 	sts	0x006A, r24
 4be:	11 c0       	rjmp	.+34     	; 0x4e2 <get_key_pressed+0xb2>
	else if(PINC == 0b01110000)
 4c0:	83 e3       	ldi	r24, 0x33	; 51
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	80 37       	cpi	r24, 0x70	; 112
 4ca:	29 f4       	brne	.+10     	; 0x4d6 <get_key_pressed+0xa6>
		row = 0;
 4cc:	10 92 6b 00 	sts	0x006B, r1
 4d0:	10 92 6a 00 	sts	0x006A, r1
 4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <get_key_pressed+0xb2>
	else
		row = -1;
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	9f ef       	ldi	r25, 0xFF	; 255
 4da:	90 93 6b 00 	sts	0x006B, r25
 4de:	80 93 6a 00 	sts	0x006A, r24
	
	PORTC = 0x00;
 4e2:	85 e3       	ldi	r24, 0x35	; 53
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	10 82       	st	Z, r1
	DDRC = 0b11110000;
 4ea:	84 e3       	ldi	r24, 0x34	; 52
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	20 ef       	ldi	r18, 0xF0	; 240
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
	PORTC = 0b00001111;
 4f4:	85 e3       	ldi	r24, 0x35	; 53
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	2f e0       	ldi	r18, 0x0F	; 15
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
	for(int i=0; i<16;++i);
 4fe:	1c 82       	std	Y+4, r1	; 0x04
 500:	1b 82       	std	Y+3, r1	; 0x03
 502:	05 c0       	rjmp	.+10     	; 0x50e <get_key_pressed+0xde>
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	9c 81       	ldd	r25, Y+4	; 0x04
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	9c 83       	std	Y+4, r25	; 0x04
 50c:	8b 83       	std	Y+3, r24	; 0x03
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	9c 81       	ldd	r25, Y+4	; 0x04
 512:	80 31       	cpi	r24, 0x10	; 16
 514:	91 05       	cpc	r25, r1
 516:	b4 f3       	brlt	.-20     	; 0x504 <get_key_pressed+0xd4>
	
	//PORTA = PINC;
	if(PINC == 0b00001110)
 518:	83 e3       	ldi	r24, 0x33	; 51
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	fc 01       	movw	r30, r24
 51e:	80 81       	ld	r24, Z
 520:	8e 30       	cpi	r24, 0x0E	; 14
 522:	39 f4       	brne	.+14     	; 0x532 <get_key_pressed+0x102>
		col = 3;
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 6d 00 	sts	0x006D, r25
 52c:	80 93 6c 00 	sts	0x006C, r24
 530:	2b c0       	rjmp	.+86     	; 0x588 <get_key_pressed+0x158>
	else if(PINC == 0b00001101)
 532:	83 e3       	ldi	r24, 0x33	; 51
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
 53a:	8d 30       	cpi	r24, 0x0D	; 13
 53c:	39 f4       	brne	.+14     	; 0x54c <get_key_pressed+0x11c>
		col = 2;
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	90 93 6d 00 	sts	0x006D, r25
 546:	80 93 6c 00 	sts	0x006C, r24
 54a:	1e c0       	rjmp	.+60     	; 0x588 <get_key_pressed+0x158>
	else if(PINC == 0b00001011)
 54c:	83 e3       	ldi	r24, 0x33	; 51
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	fc 01       	movw	r30, r24
 552:	80 81       	ld	r24, Z
 554:	8b 30       	cpi	r24, 0x0B	; 11
 556:	39 f4       	brne	.+14     	; 0x566 <get_key_pressed+0x136>
		col = 1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	90 93 6d 00 	sts	0x006D, r25
 560:	80 93 6c 00 	sts	0x006C, r24
 564:	11 c0       	rjmp	.+34     	; 0x588 <get_key_pressed+0x158>
	else if(PINC == 0b00000111)
 566:	83 e3       	ldi	r24, 0x33	; 51
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	fc 01       	movw	r30, r24
 56c:	80 81       	ld	r24, Z
 56e:	87 30       	cpi	r24, 0x07	; 7
 570:	29 f4       	brne	.+10     	; 0x57c <get_key_pressed+0x14c>
		col = 0;
 572:	10 92 6d 00 	sts	0x006D, r1
 576:	10 92 6c 00 	sts	0x006C, r1
 57a:	06 c0       	rjmp	.+12     	; 0x588 <get_key_pressed+0x158>
	else
		col = -1;
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	9f ef       	ldi	r25, 0xFF	; 255
 580:	90 93 6d 00 	sts	0x006D, r25
 584:	80 93 6c 00 	sts	0x006C, r24
}
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <display_counter>:

void display_counter()
{
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	00 d0       	rcall	.+0      	; 0x59c <display_counter+0x6>
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
	// czyscimy
	PORTB = 0xFF;
 5a0:	88 e3       	ldi	r24, 0x38	; 56
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
	PORTA = 0xFF;
 5aa:	8b e3       	ldi	r24, 0x3B	; 59
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	fc 01       	movw	r30, r24
 5b2:	20 83       	st	Z, r18
	if(row == -1 || col == -1)
 5b4:	80 91 6a 00 	lds	r24, 0x006A
 5b8:	90 91 6b 00 	lds	r25, 0x006B
 5bc:	8f 3f       	cpi	r24, 0xFF	; 255
 5be:	ff ef       	ldi	r31, 0xFF	; 255
 5c0:	9f 07       	cpc	r25, r31
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <display_counter+0x30>
 5c4:	6e c0       	rjmp	.+220    	; 0x6a2 <display_counter+0x10c>
 5c6:	80 91 6c 00 	lds	r24, 0x006C
 5ca:	90 91 6d 00 	lds	r25, 0x006D
 5ce:	8f 3f       	cpi	r24, 0xFF	; 255
 5d0:	2f ef       	ldi	r18, 0xFF	; 255
 5d2:	92 07       	cpc	r25, r18
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <display_counter+0x42>
 5d6:	65 c0       	rjmp	.+202    	; 0x6a2 <display_counter+0x10c>
		return;
	int to_disp = row*4 + col + 1;
 5d8:	80 91 6a 00 	lds	r24, 0x006A
 5dc:	90 91 6b 00 	lds	r25, 0x006B
 5e0:	9c 01       	movw	r18, r24
 5e2:	22 0f       	add	r18, r18
 5e4:	33 1f       	adc	r19, r19
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	80 91 6c 00 	lds	r24, 0x006C
 5ee:	90 91 6d 00 	lds	r25, 0x006D
 5f2:	82 0f       	add	r24, r18
 5f4:	93 1f       	adc	r25, r19
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	9a 83       	std	Y+2, r25	; 0x02
 5fa:	89 83       	std	Y+1, r24	; 0x01
	if(display == 0)
 5fc:	80 91 6f 00 	lds	r24, 0x006F
 600:	88 23       	and	r24, r24
 602:	59 f4       	brne	.+22     	; 0x61a <display_counter+0x84>
	{
		PORTB = 0b11111110;
 604:	88 e3       	ldi	r24, 0x38	; 56
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	2e ef       	ldi	r18, 0xFE	; 254
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
		PORTA = 0b00010010;
 60e:	8b e3       	ldi	r24, 0x3B	; 59
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	22 e1       	ldi	r18, 0x12	; 18
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
 618:	37 c0       	rjmp	.+110    	; 0x688 <display_counter+0xf2>
	}
	else if(display == 1)
 61a:	80 91 6f 00 	lds	r24, 0x006F
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	99 f1       	breq	.+102    	; 0x688 <display_counter+0xf2>
	{	
		//PORTB = 0b11111101;
	}
	else if(display == 2)
 622:	80 91 6f 00 	lds	r24, 0x006F
 626:	82 30       	cpi	r24, 0x02	; 2
 628:	b9 f4       	brne	.+46     	; 0x658 <display_counter+0xc2>
	{
		PORTB = 0b11111011;
 62a:	88 e3       	ldi	r24, 0x38	; 56
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	2b ef       	ldi	r18, 0xFB	; 251
 630:	fc 01       	movw	r30, r24
 632:	20 83       	st	Z, r18
		PORTA = digits[to_disp/10];
 634:	2b e3       	ldi	r18, 0x3B	; 59
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	9a 81       	ldd	r25, Y+2	; 0x02
 63c:	4a e0       	ldi	r20, 0x0A	; 10
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	ba 01       	movw	r22, r20
 642:	0e 94 8c 03 	call	0x718	; 0x718 <__divmodhi4>
 646:	ab 01       	movw	r20, r22
 648:	ca 01       	movw	r24, r20
 64a:	80 5a       	subi	r24, 0xA0	; 160
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	fc 01       	movw	r30, r24
 650:	80 81       	ld	r24, Z
 652:	f9 01       	movw	r30, r18
 654:	80 83       	st	Z, r24
 656:	18 c0       	rjmp	.+48     	; 0x688 <display_counter+0xf2>
	}
	else if(display == 3)
 658:	80 91 6f 00 	lds	r24, 0x006F
 65c:	83 30       	cpi	r24, 0x03	; 3
 65e:	a1 f4       	brne	.+40     	; 0x688 <display_counter+0xf2>
	{
		PORTB = 0b11110111;
 660:	88 e3       	ldi	r24, 0x38	; 56
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	27 ef       	ldi	r18, 0xF7	; 247
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
		PORTA = digits[to_disp%10];
 66a:	2b e3       	ldi	r18, 0x3B	; 59
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	89 81       	ldd	r24, Y+1	; 0x01
 670:	9a 81       	ldd	r25, Y+2	; 0x02
 672:	4a e0       	ldi	r20, 0x0A	; 10
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	ba 01       	movw	r22, r20
 678:	0e 94 8c 03 	call	0x718	; 0x718 <__divmodhi4>
 67c:	80 5a       	subi	r24, 0xA0	; 160
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	fc 01       	movw	r30, r24
 682:	80 81       	ld	r24, Z
 684:	f9 01       	movw	r30, r18
 686:	80 83       	st	Z, r24
	}
	display ++;
 688:	80 91 6f 00 	lds	r24, 0x006F
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	80 93 6f 00 	sts	0x006F, r24
	if(display % 4 == 0)
 692:	80 91 6f 00 	lds	r24, 0x006F
 696:	83 70       	andi	r24, 0x03	; 3
 698:	88 23       	and	r24, r24
 69a:	21 f4       	brne	.+8      	; 0x6a4 <display_counter+0x10e>
		display = 0;
 69c:	10 92 6f 00 	sts	0x006F, r1
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <display_counter+0x10e>
{
	// czyscimy
	PORTB = 0xFF;
	PORTA = 0xFF;
	if(row == -1 || col == -1)
		return;
 6a2:	00 00       	nop
		PORTA = digits[to_disp%10];
	}
	display ++;
	if(display % 4 == 0)
		display = 0;
}
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <main>:

int main(void)
{
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 6ba:	8a e3       	ldi	r24, 0x3A	; 58
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	2f ef       	ldi	r18, 0xFF	; 255
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
	DDRB = 0xFF;
 6c4:	87 e3       	ldi	r24, 0x37	; 55
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	2f ef       	ldi	r18, 0xFF	; 255
 6ca:	fc 01       	movw	r30, r24
 6cc:	20 83       	st	Z, r18
	
	init_kernel();
 6ce:	0e 94 74 01 	call	0x2e8	; 0x2e8 <init_kernel>
	
	addTask(*get_key_pressed, 50, 1);
 6d2:	01 e0       	ldi	r16, 0x01	; 1
 6d4:	10 e0       	ldi	r17, 0x00	; 0
 6d6:	20 e0       	ldi	r18, 0x00	; 0
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	42 e3       	ldi	r20, 0x32	; 50
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	88 e1       	ldi	r24, 0x18	; 24
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <addTask>
	addTask(*display_counter, 4, 1);
 6ea:	01 e0       	ldi	r16, 0x01	; 1
 6ec:	10 e0       	ldi	r17, 0x00	; 0
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	44 e0       	ldi	r20, 0x04	; 4
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	8b ec       	ldi	r24, 0xCB	; 203
 6fc:	92 e0       	ldi	r25, 0x02	; 2
 6fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <addTask>
	
	setupTimer();
 702:	0e 94 5d 01 	call	0x2ba	; 0x2ba <setupTimer>
	
	schedule();
 706:	0e 94 bf 01 	call	0x37e	; 0x37e <schedule>
	return 0;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	90 e0       	ldi	r25, 0x00	; 0
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	08 95       	ret

00000718 <__divmodhi4>:
 718:	97 fb       	bst	r25, 7
 71a:	07 2e       	mov	r0, r23
 71c:	16 f4       	brtc	.+4      	; 0x722 <__divmodhi4+0xa>
 71e:	00 94       	com	r0
 720:	07 d0       	rcall	.+14     	; 0x730 <__divmodhi4_neg1>
 722:	77 fd       	sbrc	r23, 7
 724:	09 d0       	rcall	.+18     	; 0x738 <__divmodhi4_neg2>
 726:	0e 94 a0 03 	call	0x740	; 0x740 <__udivmodhi4>
 72a:	07 fc       	sbrc	r0, 7
 72c:	05 d0       	rcall	.+10     	; 0x738 <__divmodhi4_neg2>
 72e:	3e f4       	brtc	.+14     	; 0x73e <__divmodhi4_exit>

00000730 <__divmodhi4_neg1>:
 730:	90 95       	com	r25
 732:	81 95       	neg	r24
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <__divmodhi4_neg2>:
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255

0000073e <__divmodhi4_exit>:
 73e:	08 95       	ret

00000740 <__udivmodhi4>:
 740:	aa 1b       	sub	r26, r26
 742:	bb 1b       	sub	r27, r27
 744:	51 e1       	ldi	r21, 0x11	; 17
 746:	07 c0       	rjmp	.+14     	; 0x756 <__udivmodhi4_ep>

00000748 <__udivmodhi4_loop>:
 748:	aa 1f       	adc	r26, r26
 74a:	bb 1f       	adc	r27, r27
 74c:	a6 17       	cp	r26, r22
 74e:	b7 07       	cpc	r27, r23
 750:	10 f0       	brcs	.+4      	; 0x756 <__udivmodhi4_ep>
 752:	a6 1b       	sub	r26, r22
 754:	b7 0b       	sbc	r27, r23

00000756 <__udivmodhi4_ep>:
 756:	88 1f       	adc	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	5a 95       	dec	r21
 75c:	a9 f7       	brne	.-22     	; 0x748 <__udivmodhi4_loop>
 75e:	80 95       	com	r24
 760:	90 95       	com	r25
 762:	bc 01       	movw	r22, r24
 764:	cd 01       	movw	r24, r26
 766:	08 95       	ret

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
