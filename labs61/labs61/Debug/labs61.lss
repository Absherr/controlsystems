
labs61.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000012f  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c1  00000000  00000000  00000aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000013b  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e2  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015b  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:


#include <avr/io.h>

void USART_Init( unsigned int baud )
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <USART_Init+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
  7a:	80 e4       	ldi	r24, 0x40	; 64
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	29 81       	ldd	r18, Y+1	; 0x01
  80:	3a 81       	ldd	r19, Y+2	; 0x02
  82:	23 2f       	mov	r18, r19
  84:	33 27       	eor	r19, r19
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
	UBRRL = (unsigned char)baud;
  8a:	89 e2       	ldi	r24, 0x29	; 41
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	29 81       	ldd	r18, Y+1	; 0x01
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  94:	8a e2       	ldi	r24, 0x2A	; 42
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	28 e1       	ldi	r18, 0x18	; 24
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2e e8       	ldi	r18, 0x8E	; 142
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	
}
  a8:	0f 90       	pop	r0
  aa:	0f 90       	pop	r0
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	1f 92       	push	r1
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
  be:	00 00       	nop
  c0:	8b e2       	ldi	r24, 0x2B	; 43
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	80 81       	ld	r24, Z
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	80 72       	andi	r24, 0x20	; 32
  ce:	99 27       	eor	r25, r25
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	b1 f3       	breq	.-20     	; 0xc0 <USART_Transmit+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  d4:	8c e2       	ldi	r24, 0x2C	; 44
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	29 81       	ldd	r18, Y+1	; 0x01
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
}
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <USART_Receive>:

unsigned char USART_Receive( void )
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
  ee:	00 00       	nop
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	d4 f7       	brge	.-12     	; 0xf0 <USART_Receive+0xa>
	;
	/* Get and return received data from buffer */
	return UDR;
  fc:	8c e2       	ldi	r24, 0x2C	; 44
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	80 81       	ld	r24, Z
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <main>:
	return ucsrc;
}

#include "avr/interrupt.h"
int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	USART_Init(103);
 114:	87 e6       	ldi	r24, 0x67	; 103
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	
	unsigned char ucsrc;
    while(1)
    {
		/* Read UCSRC */
		ucsrc = USART_Receive();
 11c:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_Receive>
 120:	89 83       	std	Y+1, r24	; 0x01
		USART_Transmit(ucsrc);
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	0e 94 59 00 	call	0xb2	; 0xb2 <USART_Transmit>
		//TODO:: Please write your application code 
    }
 128:	f9 cf       	rjmp	.-14     	; 0x11c <main+0x12>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
