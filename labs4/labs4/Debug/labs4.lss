
labs4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003f4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001638  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000067a  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000211a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00002149  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001bd  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000107  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f1  00000000  00000000  00002445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010a  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012c  00000000  00000000  000027e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000290e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setupPWM>:
	TCCR0 |= (1<<CS00);
	OCR0 = 0;
}

void setupPWM()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |=  (1<<WGM00) | (1<<WGM01) | (1<<CS00) | (1<<COM01);
  74:	83 e5       	ldi	r24, 0x53	; 83
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	23 e5       	ldi	r18, 0x53	; 83
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	29 66       	ori	r18, 0x69	; 105
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
}
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <setPWM>:

void setPWM(int power)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	00 d0       	rcall	.+0      	; 0x92 <setPWM+0x6>
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	9a 83       	std	Y+2, r25	; 0x02
  98:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = power;
  9a:	8c e5       	ldi	r24, 0x5C	; 92
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	29 81       	ldd	r18, Y+1	; 0x01
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
}
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <main>:

#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	2f 97       	sbiw	r28, 0x0f	; 15
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
	setupPWM();
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <setupPWM>
	//sei();	
	DDRB = 0xFF;
  ca:	87 e3       	ldi	r24, 0x37	; 55
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	unsigned char counter = 0;
  d4:	19 82       	std	Y+1, r1	; 0x01
    while(1)
    {
		setPWM(counter);
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 46 00 	call	0x8c	; 0x8c <setPWM>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	a8 ec       	ldi	r26, 0xC8	; 200
  e6:	b2 e4       	ldi	r27, 0x42	; 66
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	9b 83       	std	Y+3, r25	; 0x03
  ec:	ac 83       	std	Y+4, r26	; 0x04
  ee:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	4a e7       	ldi	r20, 0x7A	; 122
  f6:	53 e4       	ldi	r21, 0x43	; 67
  f8:	6a 81       	ldd	r22, Y+2	; 0x02
  fa:	7b 81       	ldd	r23, Y+3	; 0x03
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	9d 81       	ldd	r25, Y+5	; 0x05
 100:	0e 94 6d 01 	call	0x2da	; 0x2da <__mulsf3>
 104:	dc 01       	movw	r26, r24
 106:	cb 01       	movw	r24, r22
 108:	8e 83       	std	Y+6, r24	; 0x06
 10a:	9f 83       	std	Y+7, r25	; 0x07
 10c:	a8 87       	std	Y+8, r26	; 0x08
 10e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	5f e3       	ldi	r21, 0x3F	; 63
 118:	6e 81       	ldd	r22, Y+6	; 0x06
 11a:	7f 81       	ldd	r23, Y+7	; 0x07
 11c:	88 85       	ldd	r24, Y+8	; 0x08
 11e:	99 85       	ldd	r25, Y+9	; 0x09
 120:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__cmpsf2>
 124:	88 23       	and	r24, r24
 126:	2c f4       	brge	.+10     	; 0x132 <main+0x84>
		__ticks = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9b 87       	std	Y+11, r25	; 0x0b
 12e:	8a 87       	std	Y+10, r24	; 0x0a
 130:	42 c0       	rjmp	.+132    	; 0x1b6 <main+0x108>
	else if (__tmp > 65535)
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	3f ef       	ldi	r19, 0xFF	; 255
 136:	4f e7       	ldi	r20, 0x7F	; 127
 138:	57 e4       	ldi	r21, 0x47	; 71
 13a:	6e 81       	ldd	r22, Y+6	; 0x06
 13c:	7f 81       	ldd	r23, Y+7	; 0x07
 13e:	88 85       	ldd	r24, Y+8	; 0x08
 140:	99 85       	ldd	r25, Y+9	; 0x09
 142:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__gesf2>
 146:	18 16       	cp	r1, r24
 148:	64 f5       	brge	.+88     	; 0x1a2 <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e2       	ldi	r20, 0x20	; 32
 150:	51 e4       	ldi	r21, 0x41	; 65
 152:	6a 81       	ldd	r22, Y+2	; 0x02
 154:	7b 81       	ldd	r23, Y+3	; 0x03
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	0e 94 6d 01 	call	0x2da	; 0x2da <__mulsf3>
 15e:	dc 01       	movw	r26, r24
 160:	cb 01       	movw	r24, r22
 162:	bc 01       	movw	r22, r24
 164:	cd 01       	movw	r24, r26
 166:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__fixunssfsi>
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
 16e:	9b 87       	std	Y+11, r25	; 0x0b
 170:	8a 87       	std	Y+10, r24	; 0x0a
 172:	12 c0       	rjmp	.+36     	; 0x198 <main+0xea>
 174:	89 e1       	ldi	r24, 0x19	; 25
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9d 87       	std	Y+13, r25	; 0x0d
 17a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17c:	8c 85       	ldd	r24, Y+12	; 0x0c
 17e:	9d 85       	ldd	r25, Y+13	; 0x0d
 180:	8c 01       	movw	r16, r24
 182:	c8 01       	movw	r24, r16
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xd6>
 188:	8c 01       	movw	r16, r24
 18a:	1d 87       	std	Y+13, r17	; 0x0d
 18c:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18e:	8a 85       	ldd	r24, Y+10	; 0x0a
 190:	9b 85       	ldd	r25, Y+11	; 0x0b
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	9b 87       	std	Y+11, r25	; 0x0b
 196:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 198:	8a 85       	ldd	r24, Y+10	; 0x0a
 19a:	9b 85       	ldd	r25, Y+11	; 0x0b
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	51 f7       	brne	.-44     	; 0x174 <main+0xc6>
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a2:	6e 81       	ldd	r22, Y+6	; 0x06
 1a4:	7f 81       	ldd	r23, Y+7	; 0x07
 1a6:	88 85       	ldd	r24, Y+8	; 0x08
 1a8:	99 85       	ldd	r25, Y+9	; 0x09
 1aa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__fixunssfsi>
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	9b 87       	std	Y+11, r25	; 0x0b
 1b4:	8a 87       	std	Y+10, r24	; 0x0a
 1b6:	8a 85       	ldd	r24, Y+10	; 0x0a
 1b8:	9b 85       	ldd	r25, Y+11	; 0x0b
 1ba:	9f 87       	std	Y+15, r25	; 0x0f
 1bc:	8e 87       	std	Y+14, r24	; 0x0e
 1be:	8e 85       	ldd	r24, Y+14	; 0x0e
 1c0:	9f 85       	ldd	r25, Y+15	; 0x0f
 1c2:	8c 01       	movw	r16, r24
 1c4:	f8 01       	movw	r30, r16
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x118>
 1ca:	8f 01       	movw	r16, r30
 1cc:	1f 87       	std	Y+15, r17	; 0x0f
 1ce:	0e 87       	std	Y+14, r16	; 0x0e
		_delay_ms(100);
		counter++;
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	89 83       	std	Y+1, r24	; 0x01
		
        //TODO:: Please write your application code 
    }
 1d6:	7f cf       	rjmp	.-258    	; 0xd6 <main+0x28>

000001d8 <__cmpsf2>:
 1d8:	2f d0       	rcall	.+94     	; 0x238 <__fp_cmp>
 1da:	08 f4       	brcc	.+2      	; 0x1de <__cmpsf2+0x6>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 95       	ret

000001e0 <__fixunssfsi>:
 1e0:	57 d0       	rcall	.+174    	; 0x290 <__fp_splitA>
 1e2:	88 f0       	brcs	.+34     	; 0x206 <__fixunssfsi+0x26>
 1e4:	9f 57       	subi	r25, 0x7F	; 127
 1e6:	90 f0       	brcs	.+36     	; 0x20c <__fixunssfsi+0x2c>
 1e8:	b9 2f       	mov	r27, r25
 1ea:	99 27       	eor	r25, r25
 1ec:	b7 51       	subi	r27, 0x17	; 23
 1ee:	a0 f0       	brcs	.+40     	; 0x218 <__fixunssfsi+0x38>
 1f0:	d1 f0       	breq	.+52     	; 0x226 <__fixunssfsi+0x46>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	1a f0       	brmi	.+6      	; 0x202 <__fixunssfsi+0x22>
 1fc:	ba 95       	dec	r27
 1fe:	c9 f7       	brne	.-14     	; 0x1f2 <__fixunssfsi+0x12>
 200:	12 c0       	rjmp	.+36     	; 0x226 <__fixunssfsi+0x46>
 202:	b1 30       	cpi	r27, 0x01	; 1
 204:	81 f0       	breq	.+32     	; 0x226 <__fixunssfsi+0x46>
 206:	5e d0       	rcall	.+188    	; 0x2c4 <__fp_zero>
 208:	b1 e0       	ldi	r27, 0x01	; 1
 20a:	08 95       	ret
 20c:	5b c0       	rjmp	.+182    	; 0x2c4 <__fp_zero>
 20e:	67 2f       	mov	r22, r23
 210:	78 2f       	mov	r23, r24
 212:	88 27       	eor	r24, r24
 214:	b8 5f       	subi	r27, 0xF8	; 248
 216:	39 f0       	breq	.+14     	; 0x226 <__fixunssfsi+0x46>
 218:	b9 3f       	cpi	r27, 0xF9	; 249
 21a:	cc f3       	brlt	.-14     	; 0x20e <__fixunssfsi+0x2e>
 21c:	86 95       	lsr	r24
 21e:	77 95       	ror	r23
 220:	67 95       	ror	r22
 222:	b3 95       	inc	r27
 224:	d9 f7       	brne	.-10     	; 0x21c <__fixunssfsi+0x3c>
 226:	3e f4       	brtc	.+14     	; 0x236 <__fixunssfsi+0x56>
 228:	90 95       	com	r25
 22a:	80 95       	com	r24
 22c:	70 95       	com	r23
 22e:	61 95       	neg	r22
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	8f 4f       	sbci	r24, 0xFF	; 255
 234:	9f 4f       	sbci	r25, 0xFF	; 255
 236:	08 95       	ret

00000238 <__fp_cmp>:
 238:	99 0f       	add	r25, r25
 23a:	00 08       	sbc	r0, r0
 23c:	55 0f       	add	r21, r21
 23e:	aa 0b       	sbc	r26, r26
 240:	e0 e8       	ldi	r30, 0x80	; 128
 242:	fe ef       	ldi	r31, 0xFE	; 254
 244:	16 16       	cp	r1, r22
 246:	17 06       	cpc	r1, r23
 248:	e8 07       	cpc	r30, r24
 24a:	f9 07       	cpc	r31, r25
 24c:	c0 f0       	brcs	.+48     	; 0x27e <__fp_cmp+0x46>
 24e:	12 16       	cp	r1, r18
 250:	13 06       	cpc	r1, r19
 252:	e4 07       	cpc	r30, r20
 254:	f5 07       	cpc	r31, r21
 256:	98 f0       	brcs	.+38     	; 0x27e <__fp_cmp+0x46>
 258:	62 1b       	sub	r22, r18
 25a:	73 0b       	sbc	r23, r19
 25c:	84 0b       	sbc	r24, r20
 25e:	95 0b       	sbc	r25, r21
 260:	39 f4       	brne	.+14     	; 0x270 <__fp_cmp+0x38>
 262:	0a 26       	eor	r0, r26
 264:	61 f0       	breq	.+24     	; 0x27e <__fp_cmp+0x46>
 266:	23 2b       	or	r18, r19
 268:	24 2b       	or	r18, r20
 26a:	25 2b       	or	r18, r21
 26c:	21 f4       	brne	.+8      	; 0x276 <__fp_cmp+0x3e>
 26e:	08 95       	ret
 270:	0a 26       	eor	r0, r26
 272:	09 f4       	brne	.+2      	; 0x276 <__fp_cmp+0x3e>
 274:	a1 40       	sbci	r26, 0x01	; 1
 276:	a6 95       	lsr	r26
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	81 1d       	adc	r24, r1
 27c:	81 1d       	adc	r24, r1
 27e:	08 95       	ret

00000280 <__fp_split3>:
 280:	57 fd       	sbrc	r21, 7
 282:	90 58       	subi	r25, 0x80	; 128
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	59 f0       	breq	.+22     	; 0x2a0 <__fp_splitA+0x10>
 28a:	5f 3f       	cpi	r21, 0xFF	; 255
 28c:	71 f0       	breq	.+28     	; 0x2aa <__fp_splitA+0x1a>
 28e:	47 95       	ror	r20

00000290 <__fp_splitA>:
 290:	88 0f       	add	r24, r24
 292:	97 fb       	bst	r25, 7
 294:	99 1f       	adc	r25, r25
 296:	61 f0       	breq	.+24     	; 0x2b0 <__fp_splitA+0x20>
 298:	9f 3f       	cpi	r25, 0xFF	; 255
 29a:	79 f0       	breq	.+30     	; 0x2ba <__fp_splitA+0x2a>
 29c:	87 95       	ror	r24
 29e:	08 95       	ret
 2a0:	12 16       	cp	r1, r18
 2a2:	13 06       	cpc	r1, r19
 2a4:	14 06       	cpc	r1, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	f2 cf       	rjmp	.-28     	; 0x28e <__fp_split3+0xe>
 2aa:	46 95       	lsr	r20
 2ac:	f1 df       	rcall	.-30     	; 0x290 <__fp_splitA>
 2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <__fp_splitA+0x30>
 2b0:	16 16       	cp	r1, r22
 2b2:	17 06       	cpc	r1, r23
 2b4:	18 06       	cpc	r1, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	f1 cf       	rjmp	.-30     	; 0x29c <__fp_splitA+0xc>
 2ba:	86 95       	lsr	r24
 2bc:	71 05       	cpc	r23, r1
 2be:	61 05       	cpc	r22, r1
 2c0:	08 94       	sec
 2c2:	08 95       	ret

000002c4 <__fp_zero>:
 2c4:	e8 94       	clt

000002c6 <__fp_szero>:
 2c6:	bb 27       	eor	r27, r27
 2c8:	66 27       	eor	r22, r22
 2ca:	77 27       	eor	r23, r23
 2cc:	cb 01       	movw	r24, r22
 2ce:	97 f9       	bld	r25, 7
 2d0:	08 95       	ret

000002d2 <__gesf2>:
 2d2:	b2 df       	rcall	.-156    	; 0x238 <__fp_cmp>
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <__gesf2+0x6>
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	08 95       	ret

000002da <__mulsf3>:
 2da:	0b d0       	rcall	.+22     	; 0x2f2 <__mulsf3x>
 2dc:	78 c0       	rjmp	.+240    	; 0x3ce <__fp_round>
 2de:	69 d0       	rcall	.+210    	; 0x3b2 <__fp_pscA>
 2e0:	28 f0       	brcs	.+10     	; 0x2ec <__mulsf3+0x12>
 2e2:	6e d0       	rcall	.+220    	; 0x3c0 <__fp_pscB>
 2e4:	18 f0       	brcs	.+6      	; 0x2ec <__mulsf3+0x12>
 2e6:	95 23       	and	r25, r21
 2e8:	09 f0       	breq	.+2      	; 0x2ec <__mulsf3+0x12>
 2ea:	5a c0       	rjmp	.+180    	; 0x3a0 <__fp_inf>
 2ec:	5f c0       	rjmp	.+190    	; 0x3ac <__fp_nan>
 2ee:	11 24       	eor	r1, r1
 2f0:	ea cf       	rjmp	.-44     	; 0x2c6 <__fp_szero>

000002f2 <__mulsf3x>:
 2f2:	c6 df       	rcall	.-116    	; 0x280 <__fp_split3>
 2f4:	a0 f3       	brcs	.-24     	; 0x2de <__mulsf3+0x4>

000002f6 <__mulsf3_pse>:
 2f6:	95 9f       	mul	r25, r21
 2f8:	d1 f3       	breq	.-12     	; 0x2ee <__mulsf3+0x14>
 2fa:	95 0f       	add	r25, r21
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	55 1f       	adc	r21, r21
 300:	62 9f       	mul	r22, r18
 302:	f0 01       	movw	r30, r0
 304:	72 9f       	mul	r23, r18
 306:	bb 27       	eor	r27, r27
 308:	f0 0d       	add	r31, r0
 30a:	b1 1d       	adc	r27, r1
 30c:	63 9f       	mul	r22, r19
 30e:	aa 27       	eor	r26, r26
 310:	f0 0d       	add	r31, r0
 312:	b1 1d       	adc	r27, r1
 314:	aa 1f       	adc	r26, r26
 316:	64 9f       	mul	r22, r20
 318:	66 27       	eor	r22, r22
 31a:	b0 0d       	add	r27, r0
 31c:	a1 1d       	adc	r26, r1
 31e:	66 1f       	adc	r22, r22
 320:	82 9f       	mul	r24, r18
 322:	22 27       	eor	r18, r18
 324:	b0 0d       	add	r27, r0
 326:	a1 1d       	adc	r26, r1
 328:	62 1f       	adc	r22, r18
 32a:	73 9f       	mul	r23, r19
 32c:	b0 0d       	add	r27, r0
 32e:	a1 1d       	adc	r26, r1
 330:	62 1f       	adc	r22, r18
 332:	83 9f       	mul	r24, r19
 334:	a0 0d       	add	r26, r0
 336:	61 1d       	adc	r22, r1
 338:	22 1f       	adc	r18, r18
 33a:	74 9f       	mul	r23, r20
 33c:	33 27       	eor	r19, r19
 33e:	a0 0d       	add	r26, r0
 340:	61 1d       	adc	r22, r1
 342:	23 1f       	adc	r18, r19
 344:	84 9f       	mul	r24, r20
 346:	60 0d       	add	r22, r0
 348:	21 1d       	adc	r18, r1
 34a:	82 2f       	mov	r24, r18
 34c:	76 2f       	mov	r23, r22
 34e:	6a 2f       	mov	r22, r26
 350:	11 24       	eor	r1, r1
 352:	9f 57       	subi	r25, 0x7F	; 127
 354:	50 40       	sbci	r21, 0x00	; 0
 356:	8a f0       	brmi	.+34     	; 0x37a <__mulsf3_pse+0x84>
 358:	e1 f0       	breq	.+56     	; 0x392 <__mulsf3_pse+0x9c>
 35a:	88 23       	and	r24, r24
 35c:	4a f0       	brmi	.+18     	; 0x370 <__mulsf3_pse+0x7a>
 35e:	ee 0f       	add	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	bb 1f       	adc	r27, r27
 364:	66 1f       	adc	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	88 1f       	adc	r24, r24
 36a:	91 50       	subi	r25, 0x01	; 1
 36c:	50 40       	sbci	r21, 0x00	; 0
 36e:	a9 f7       	brne	.-22     	; 0x35a <__mulsf3_pse+0x64>
 370:	9e 3f       	cpi	r25, 0xFE	; 254
 372:	51 05       	cpc	r21, r1
 374:	70 f0       	brcs	.+28     	; 0x392 <__mulsf3_pse+0x9c>
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <__fp_inf>
 378:	a6 cf       	rjmp	.-180    	; 0x2c6 <__fp_szero>
 37a:	5f 3f       	cpi	r21, 0xFF	; 255
 37c:	ec f3       	brlt	.-6      	; 0x378 <__mulsf3_pse+0x82>
 37e:	98 3e       	cpi	r25, 0xE8	; 232
 380:	dc f3       	brlt	.-10     	; 0x378 <__mulsf3_pse+0x82>
 382:	86 95       	lsr	r24
 384:	77 95       	ror	r23
 386:	67 95       	ror	r22
 388:	b7 95       	ror	r27
 38a:	f7 95       	ror	r31
 38c:	e7 95       	ror	r30
 38e:	9f 5f       	subi	r25, 0xFF	; 255
 390:	c1 f7       	brne	.-16     	; 0x382 <__mulsf3_pse+0x8c>
 392:	fe 2b       	or	r31, r30
 394:	88 0f       	add	r24, r24
 396:	91 1d       	adc	r25, r1
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	97 f9       	bld	r25, 7
 39e:	08 95       	ret

000003a0 <__fp_inf>:
 3a0:	97 f9       	bld	r25, 7
 3a2:	9f 67       	ori	r25, 0x7F	; 127
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	08 95       	ret

000003ac <__fp_nan>:
 3ac:	9f ef       	ldi	r25, 0xFF	; 255
 3ae:	80 ec       	ldi	r24, 0xC0	; 192
 3b0:	08 95       	ret

000003b2 <__fp_pscA>:
 3b2:	00 24       	eor	r0, r0
 3b4:	0a 94       	dec	r0
 3b6:	16 16       	cp	r1, r22
 3b8:	17 06       	cpc	r1, r23
 3ba:	18 06       	cpc	r1, r24
 3bc:	09 06       	cpc	r0, r25
 3be:	08 95       	ret

000003c0 <__fp_pscB>:
 3c0:	00 24       	eor	r0, r0
 3c2:	0a 94       	dec	r0
 3c4:	12 16       	cp	r1, r18
 3c6:	13 06       	cpc	r1, r19
 3c8:	14 06       	cpc	r1, r20
 3ca:	05 06       	cpc	r0, r21
 3cc:	08 95       	ret

000003ce <__fp_round>:
 3ce:	09 2e       	mov	r0, r25
 3d0:	03 94       	inc	r0
 3d2:	00 0c       	add	r0, r0
 3d4:	11 f4       	brne	.+4      	; 0x3da <__fp_round+0xc>
 3d6:	88 23       	and	r24, r24
 3d8:	52 f0       	brmi	.+20     	; 0x3ee <__fp_round+0x20>
 3da:	bb 0f       	add	r27, r27
 3dc:	40 f4       	brcc	.+16     	; 0x3ee <__fp_round+0x20>
 3de:	bf 2b       	or	r27, r31
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <__fp_round+0x18>
 3e2:	60 ff       	sbrs	r22, 0
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <__fp_round+0x20>
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 4f       	sbci	r24, 0xFF	; 255
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	08 95       	ret

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
