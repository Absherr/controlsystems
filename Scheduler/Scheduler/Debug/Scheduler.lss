
Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800060  00800060  000005ca  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000264  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000134  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ef  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000015c  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000031d  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 3b       	cpi	r26, 0xB1	; 177
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
  74:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_10>:
} TASK;

TASK TASK_TABLE[TASK_SIZE];
uint8_t task_count = 0;
ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	00 90 5f 00 	lds	r0, 0x005F
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	2f 93       	push	r18
  8a:	3f 93       	push	r19
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	00 d0       	rcall	.+0      	; 0x9a <__vector_10+0x1e>
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	TASK *tsk;
	for(i = 0; i<task_count; ++i)
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	6c c0       	rjmp	.+216    	; 0x17c <__vector_10+0x100>
	{
		tsk = TASK_TABLE + i;
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	88 2f       	mov	r24, r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	8f 59       	subi	r24, 0x9F	; 159
  b8:	9f 4f       	sbci	r25, 0xFF	; 255
  ba:	9b 83       	std	Y+3, r25	; 0x03
  bc:	8a 83       	std	Y+2, r24	; 0x02
		if(tsk->interval != NON_PERIODIC)
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	9b 81       	ldd	r25, Y+3	; 0x03
  c2:	fc 01       	movw	r30, r24
  c4:	82 81       	ldd	r24, Z+2	; 0x02
  c6:	93 81       	ldd	r25, Z+3	; 0x03
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	69 f1       	breq	.+90     	; 0x126 <__vector_10+0xaa>
		{
			tsk->togo--;
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	9b 81       	ldd	r25, Y+3	; 0x03
  d0:	fc 01       	movw	r30, r24
  d2:	84 81       	ldd	r24, Z+4	; 0x04
  d4:	95 81       	ldd	r25, Z+5	; 0x05
  d6:	9c 01       	movw	r18, r24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	9b 81       	ldd	r25, Y+3	; 0x03
  e0:	fc 01       	movw	r30, r24
  e2:	35 83       	std	Z+5, r19	; 0x05
  e4:	24 83       	std	Z+4, r18	; 0x04
			if(tsk->togo == 0)
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	9b 81       	ldd	r25, Y+3	; 0x03
  ea:	fc 01       	movw	r30, r24
  ec:	84 81       	ldd	r24, Z+4	; 0x04
  ee:	95 81       	ldd	r25, Z+5	; 0x05
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	09 f0       	breq	.+2      	; 0xf6 <__vector_10+0x7a>
  f4:	40 c0       	rjmp	.+128    	; 0x176 <__vector_10+0xfa>
			{
				tsk->togo = tsk->interval;
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	9b 81       	ldd	r25, Y+3	; 0x03
  fa:	fc 01       	movw	r30, r24
  fc:	22 81       	ldd	r18, Z+2	; 0x02
  fe:	33 81       	ldd	r19, Z+3	; 0x03
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	9b 81       	ldd	r25, Y+3	; 0x03
 104:	fc 01       	movw	r30, r24
 106:	35 83       	std	Z+5, r19	; 0x05
 108:	24 83       	std	Z+4, r18	; 0x04
				tsk->ready++;
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	9b 81       	ldd	r25, Y+3	; 0x03
 10e:	fc 01       	movw	r30, r24
 110:	86 81       	ldd	r24, Z+6	; 0x06
 112:	97 81       	ldd	r25, Z+7	; 0x07
 114:	9c 01       	movw	r18, r24
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	9b 81       	ldd	r25, Y+3	; 0x03
 11e:	fc 01       	movw	r30, r24
 120:	37 83       	std	Z+7, r19	; 0x07
 122:	26 83       	std	Z+6, r18	; 0x06
 124:	28 c0       	rjmp	.+80     	; 0x176 <__vector_10+0xfa>
			}
		}
		else if(tsk->togo > 0)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	9b 81       	ldd	r25, Y+3	; 0x03
 12a:	fc 01       	movw	r30, r24
 12c:	84 81       	ldd	r24, Z+4	; 0x04
 12e:	95 81       	ldd	r25, Z+5	; 0x05
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	09 f1       	breq	.+66     	; 0x176 <__vector_10+0xfa>
		{	
			tsk->togo--;
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	9b 81       	ldd	r25, Y+3	; 0x03
 138:	fc 01       	movw	r30, r24
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	95 81       	ldd	r25, Z+5	; 0x05
 13e:	9c 01       	movw	r18, r24
 140:	21 50       	subi	r18, 0x01	; 1
 142:	31 09       	sbc	r19, r1
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	fc 01       	movw	r30, r24
 14a:	35 83       	std	Z+5, r19	; 0x05
 14c:	24 83       	std	Z+4, r18	; 0x04
			if(tsk->togo == 0)
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	9b 81       	ldd	r25, Y+3	; 0x03
 152:	fc 01       	movw	r30, r24
 154:	84 81       	ldd	r24, Z+4	; 0x04
 156:	95 81       	ldd	r25, Z+5	; 0x05
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	69 f4       	brne	.+26     	; 0x176 <__vector_10+0xfa>
			{
				tsk->ready++;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	fc 01       	movw	r30, r24
 162:	86 81       	ldd	r24, Z+6	; 0x06
 164:	97 81       	ldd	r25, Z+7	; 0x07
 166:	9c 01       	movw	r18, r24
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	9b 81       	ldd	r25, Y+3	; 0x03
 170:	fc 01       	movw	r30, r24
 172:	37 83       	std	Z+7, r19	; 0x07
 174:	26 83       	std	Z+6, r18	; 0x06
uint8_t task_count = 0;
ISR(TIMER0_COMP_vect)
{
	uint8_t i;
	TASK *tsk;
	for(i = 0; i<task_count; ++i)
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	80 91 60 00 	lds	r24, 0x0060
 180:	99 81       	ldd	r25, Y+1	; 0x01
 182:	98 17       	cp	r25, r24
 184:	08 f4       	brcc	.+2      	; 0x188 <__vector_10+0x10c>
 186:	8e cf       	rjmp	.-228    	; 0xa4 <__vector_10+0x28>
			{
				tsk->ready++;
			}
		}
	}
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	00 92 5f 00 	sts	0x005F, r0
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <addTask>:

void addTask(void (*f)(),uint32_t timeout, uint32_t isPeriodic)
{
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	2a 97       	sbiw	r28, 0x0a	; 10
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	9a 83       	std	Y+2, r25	; 0x02
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	4b 83       	std	Y+3, r20	; 0x03
 1c8:	5c 83       	std	Y+4, r21	; 0x04
 1ca:	6d 83       	std	Y+5, r22	; 0x05
 1cc:	7e 83       	std	Y+6, r23	; 0x06
 1ce:	0f 83       	std	Y+7, r16	; 0x07
 1d0:	18 87       	std	Y+8, r17	; 0x08
 1d2:	29 87       	std	Y+9, r18	; 0x09
 1d4:	3a 87       	std	Y+10, r19	; 0x0a
	if(task_count + 1<TASK_SIZE){
 1d6:	80 91 60 00 	lds	r24, 0x0060
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	8a 30       	cpi	r24, 0x0A	; 10
 1e2:	91 05       	cpc	r25, r1
 1e4:	0c f0       	brlt	.+2      	; 0x1e8 <addTask+0x3e>
 1e6:	53 c0       	rjmp	.+166    	; 0x28e <addTask+0xe4>
		cli();
 1e8:	f8 94       	cli
		TASK_TABLE[task_count].function=f;
 1ea:	80 91 60 00 	lds	r24, 0x0060
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	8f 59       	subi	r24, 0x9F	; 159
 200:	9f 4f       	sbci	r25, 0xFF	; 255
 202:	29 81       	ldd	r18, Y+1	; 0x01
 204:	3a 81       	ldd	r19, Y+2	; 0x02
 206:	fc 01       	movw	r30, r24
 208:	31 83       	std	Z+1, r19	; 0x01
 20a:	20 83       	st	Z, r18
		TASK_TABLE[task_count].togo=timeout;
 20c:	80 91 60 00 	lds	r24, 0x0060
 210:	88 2f       	mov	r24, r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2b 81       	ldd	r18, Y+3	; 0x03
 216:	3c 81       	ldd	r19, Y+4	; 0x04
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	8b 59       	subi	r24, 0x9B	; 155
 226:	9f 4f       	sbci	r25, 0xFF	; 255
 228:	fc 01       	movw	r30, r24
 22a:	31 83       	std	Z+1, r19	; 0x01
 22c:	20 83       	st	Z, r18
		TASK_TABLE[task_count].ready=0;
 22e:	80 91 60 00 	lds	r24, 0x0060
 232:	88 2f       	mov	r24, r24
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	89 59       	subi	r24, 0x99	; 153
 244:	9f 4f       	sbci	r25, 0xFF	; 255
 246:	fc 01       	movw	r30, r24
 248:	11 82       	std	Z+1, r1	; 0x01
 24a:	10 82       	st	Z, r1
		TASK_TABLE[task_count++].interval=(isPeriodic)?timeout:NON_PERIODIC;
 24c:	40 91 60 00 	lds	r20, 0x0060
 250:	24 2f       	mov	r18, r20
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	8f 81       	ldd	r24, Y+7	; 0x07
 256:	98 85       	ldd	r25, Y+8	; 0x08
 258:	a9 85       	ldd	r26, Y+9	; 0x09
 25a:	ba 85       	ldd	r27, Y+10	; 0x0a
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	a1 05       	cpc	r26, r1
 260:	b1 05       	cpc	r27, r1
 262:	19 f0       	breq	.+6      	; 0x26a <addTask+0xc0>
 264:	8b 81       	ldd	r24, Y+3	; 0x03
 266:	9c 81       	ldd	r25, Y+4	; 0x04
 268:	02 c0       	rjmp	.+4      	; 0x26e <addTask+0xc4>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	2d 59       	subi	r18, 0x9D	; 157
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	f9 01       	movw	r30, r18
 280:	91 83       	std	Z+1, r25	; 0x01
 282:	80 83       	st	Z, r24
 284:	84 2f       	mov	r24, r20
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 93 60 00 	sts	0x0060, r24
		sei();
 28c:	78 94       	sei
	}
}
 28e:	2a 96       	adiw	r28, 0x0a	; 10
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	08 95       	ret

000002a4 <setupTimer>:

void setupTimer()
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
	TIMSK=0b00000010;//Enable output compare interrupt.
 2ac:	89 e5       	ldi	r24, 0x59	; 89
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	22 e0       	ldi	r18, 0x02	; 2
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
	TCCR0=0b00000011;//Set 1:64 clock.
 2b6:	83 e5       	ldi	r24, 0x53	; 83
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	23 e0       	ldi	r18, 0x03	; 3
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
	OCR0=250;//250 ticks @ 250 kHz = 1 ms.
 2c0:	8c e5       	ldi	r24, 0x5C	; 92
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	2a ef       	ldi	r18, 0xFA	; 250
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
	sei();
 2ca:	78 94       	sei
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <init_kernel>:
void init_kernel()
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	1f 92       	push	r1
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	task_count = 0;
 2dc:	10 92 60 00 	sts	0x0060, r1
	for(i=0;i<TASK_SIZE; ++i)
 2e0:	19 82       	std	Y+1, r1	; 0x01
 2e2:	3b c0       	rjmp	.+118    	; 0x35a <init_kernel+0x88>
	{
		TASK_TABLE[i].function = 0;
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	8f 59       	subi	r24, 0x9F	; 159
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	fc 01       	movw	r30, r24
 2fc:	11 82       	std	Z+1, r1	; 0x01
 2fe:	10 82       	st	Z, r1
		TASK_TABLE[i].interval = 0;
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	8d 59       	subi	r24, 0x9D	; 157
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	fc 01       	movw	r30, r24
 318:	11 82       	std	Z+1, r1	; 0x01
 31a:	10 82       	st	Z, r1
		TASK_TABLE[i].togo = 0;
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	8b 59       	subi	r24, 0x9B	; 155
 330:	9f 4f       	sbci	r25, 0xFF	; 255
 332:	fc 01       	movw	r30, r24
 334:	11 82       	std	Z+1, r1	; 0x01
 336:	10 82       	st	Z, r1
		TASK_TABLE[i].ready = 0;
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	89 59       	subi	r24, 0x99	; 153
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	fc 01       	movw	r30, r24
 350:	11 82       	std	Z+1, r1	; 0x01
 352:	10 82       	st	Z, r1
}
void init_kernel()
{
	uint8_t i;
	task_count = 0;
	for(i=0;i<TASK_SIZE; ++i)
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	8a 30       	cpi	r24, 0x0A	; 10
 35e:	10 f2       	brcs	.-124    	; 0x2e4 <init_kernel+0x12>
		TASK_TABLE[i].function = 0;
		TASK_TABLE[i].interval = 0;
		TASK_TABLE[i].togo = 0;
		TASK_TABLE[i].ready = 0;
	}
}
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <schedule>:

void schedule()
{	
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	1f 92       	push	r1
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	while(task_count)
 372:	4a c0       	rjmp	.+148    	; 0x408 <schedule+0xa0>
	{
		for(i = 0; i < task_count; ++i) {
 374:	19 82       	std	Y+1, r1	; 0x01
 376:	42 c0       	rjmp	.+132    	; 0x3fc <schedule+0x94>
			if(TASK_TABLE[i].ready != 0) {
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	88 2f       	mov	r24, r24
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	89 59       	subi	r24, 0x99	; 153
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	fc 01       	movw	r30, r24
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	79 f1       	breq	.+94     	; 0x3f6 <schedule+0x8e>
				TASK_TABLE[i].function();
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	88 2f       	mov	r24, r24
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	8f 59       	subi	r24, 0x9F	; 159
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	fc 01       	movw	r30, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	91 81       	ldd	r25, Z+1	; 0x01
 3b4:	fc 01       	movw	r30, r24
 3b6:	09 95       	icall
				cli();
 3b8:	f8 94       	cli
				TASK_TABLE[i].ready--;
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	9c 01       	movw	r18, r24
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	29 59       	subi	r18, 0x99	; 153
 3d0:	3f 4f       	sbci	r19, 0xFF	; 255
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	31 81       	ldd	r19, Z+1	; 0x01
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	31 09       	sbc	r19, r1
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	89 59       	subi	r24, 0x99	; 153
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	fc 01       	movw	r30, r24
 3ee:	31 83       	std	Z+1, r19	; 0x01
 3f0:	20 83       	st	Z, r18
				sei();
 3f2:	78 94       	sei
				break;
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <schedule+0xa0>
void schedule()
{	
	uint8_t i;
	while(task_count)
	{
		for(i = 0; i < task_count; ++i) {
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	89 83       	std	Y+1, r24	; 0x01
 3fc:	80 91 60 00 	lds	r24, 0x0060
 400:	99 81       	ldd	r25, Y+1	; 0x01
 402:	98 17       	cp	r25, r24
 404:	08 f4       	brcc	.+2      	; 0x408 <schedule+0xa0>
 406:	b8 cf       	rjmp	.-144    	; 0x378 <schedule+0x10>
}

void schedule()
{	
	uint8_t i;
	while(task_count)
 408:	80 91 60 00 	lds	r24, 0x0060
 40c:	88 23       	and	r24, r24
 40e:	09 f0       	breq	.+2      	; 0x412 <schedule+0xaa>
 410:	b1 cf       	rjmp	.-158    	; 0x374 <schedule+0xc>
				sei();
				break;
			}
		}
	}
}
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <pierwsza>:

void pierwsza()
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= (1<<PINA0);
 422:	8b e3       	ldi	r24, 0x3B	; 59
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	2b e3       	ldi	r18, 0x3B	; 59
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	30 81       	ld	r19, Z
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	23 27       	eor	r18, r19
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <druga>:
void druga()
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= (1<<PINA1);
 444:	8b e3       	ldi	r24, 0x3B	; 59
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	2b e3       	ldi	r18, 0x3B	; 59
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	f9 01       	movw	r30, r18
 44e:	30 81       	ld	r19, Z
 450:	22 e0       	ldi	r18, 0x02	; 2
 452:	23 27       	eor	r18, r19
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <trzecia>:
void trzecia()
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= (1<<PINA2);
 466:	8b e3       	ldi	r24, 0x3B	; 59
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	2b e3       	ldi	r18, 0x3B	; 59
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	f9 01       	movw	r30, r18
 470:	30 81       	ld	r19, Z
 472:	24 e0       	ldi	r18, 0x04	; 4
 474:	23 27       	eor	r18, r19
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <czwarta>:
void czwarta()
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= (1<<PINA3);
 488:	8b e3       	ldi	r24, 0x3B	; 59
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	2b e3       	ldi	r18, 0x3B	; 59
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	f9 01       	movw	r30, r18
 492:	30 81       	ld	r19, Z
 494:	28 e0       	ldi	r18, 0x08	; 8
 496:	23 27       	eor	r18, r19
 498:	fc 01       	movw	r30, r24
 49a:	20 83       	st	Z, r18
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <main>:



int main(void)
{
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 4ae:	8a e3       	ldi	r24, 0x3A	; 58
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
	
	init_kernel();
 4b8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <init_kernel>
	addTask(*pierwsza, 2000, 1);
 4bc:	01 e0       	ldi	r16, 0x01	; 1
 4be:	10 e0       	ldi	r17, 0x00	; 0
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	40 ed       	ldi	r20, 0xD0	; 208
 4c6:	57 e0       	ldi	r21, 0x07	; 7
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	8d e0       	ldi	r24, 0x0D	; 13
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <addTask>
	addTask(*druga, 1000, 1);
 4d4:	01 e0       	ldi	r16, 0x01	; 1
 4d6:	10 e0       	ldi	r17, 0x00	; 0
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	48 ee       	ldi	r20, 0xE8	; 232
 4de:	53 e0       	ldi	r21, 0x03	; 3
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	8e e1       	ldi	r24, 0x1E	; 30
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <addTask>
	addTask(*trzecia, 500, 1);
 4ec:	01 e0       	ldi	r16, 0x01	; 1
 4ee:	10 e0       	ldi	r17, 0x00	; 0
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	44 ef       	ldi	r20, 0xF4	; 244
 4f6:	51 e0       	ldi	r21, 0x01	; 1
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	8f e2       	ldi	r24, 0x2F	; 47
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	0e 94 d5 00 	call	0x1aa	; 0x1aa <addTask>
	addTask(*czwarta, 250, 1);
 504:	01 e0       	ldi	r16, 0x01	; 1
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	4a ef       	ldi	r20, 0xFA	; 250
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e4       	ldi	r24, 0x40	; 64
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	0e 94 d5 00 	call	0x1aa	; 0x1aa <addTask>
	
	setupTimer();
 51c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <setupTimer>
	
	schedule();
 520:	0e 94 b4 01 	call	0x368	; 0x368 <schedule>
	return 0;
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
